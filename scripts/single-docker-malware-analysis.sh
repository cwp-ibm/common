#!/bin/bash

function usage()
{
    echo -n "
    Perform full Sysflow Analyis on executable.

    Usage:
      ./single-docker-malware-analysis.sh --executable <EXECUTABLE> [--max-duration <MAX-DURATION>] [--output <OUTPUT>] [--override-dockerfile]

    Options:
        --help                                          Show this screen
        --executable <EXECUTABLE>                       The full path of the executable to analyze
        --max-duration <MAX-DURATION>                   [optional] The max duration in seconds to perform Sysflow Analysis
                                                        If not defined defaults to 1 hour.
        --output <OUTPUT>                               [optional] The folder to save analysis outputs
                                                        If not defined defaults to /data/results/{executable}/{timestamp},
                                                        where {timestamp} is the datetime of when the analysis started.
        --override-dockerfile                           [optional] Override the Dockerfile
        --pending-upload-symbolic-link <PU_SYM_LINK>    [optional] Create a symbolic link to output folder
    "
    echo
}

function parse_args()
{
    if [[ "$#" -eq 0 ]]; then
        usage
        exit 1
    fi

    while (( "$#" )); do
        case "$1" in
            --executable)
            MALWARE_FILE_PATH="$2"
            shift 2
            ;;
			--output)
            OUTPUT_FOLDER="$2"
            shift 2
            ;;
            --max-duration)
            DURATION="$2"
            shift 2
            ;;
            --override-dockerfile)
            OVERRIDE=true
            shift 1
            ;;
            --pending-upload-symbolic-link)
            PU_SYM_LINK="$2"
            shift 2
            ;;
            --help)
            usage
            exit 0
            ;;
            --) # end argument parsing
            shift
            break
            ;;
            -*|--*) # unsupported flags
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
            *) # preserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
        esac
    done
}

function validate()
{
    if [[ -z ${MALWARE_FILE_PATH} ]];
    then
        usage
        exit 0
    fi
}

function exit_on_error() {
    exit_code=$1
    last_command=${@:2}
    if [ $exit_code -ne 0 ]; then
        >&2 echo "\"${last_command}\" command failed with exit code ${exit_code}."
        exit $exit_code
    fi
}

function stop_container() {
    local __CONTAINER_NAME=$1
    local __CONTAINER_IS_RUNNING=$(docker container ls --format '{{.Names}}' | grep "$__CONTAINER_NAME")
    if [ -n "$__CONTAINER_IS_RUNNING" ];
    then
        echo "stoping container $__CONTAINER_NAME"
        docker container stop $__CONTAINER_NAME
    fi
}

SCRIPT_FOLDER=$(dirname $(readlink -f "$0"))

source ${SCRIPT_FOLDER}/utils.sh

set -o history -o histexpand

parse_args "$@"

validate

BASE_IMAGE=ubuntu:20.04
DURATION=${DURATION:-3600}
CURRENT_TIME=$(date +%Y-%m-%dT%H-%M-%S)

MALWARE_FILE_NAME="$(basename ${MALWARE_FILE_PATH})"
MALWARE_DOCKER_IMAGE_TAG="malware/$(basename ${MALWARE_FILE_NAME})":"${BASE_IMAGE/:/-}"
MALWARE_CONTAINER_NAME=${MALWARE_DOCKER_IMAGE_TAG//[:.\/]/-}

DOCKERFILE_NAME="${MALWARE_FILE_NAME}.Dockerfile"
DOCKER_CONTEXT=$(dirname ${MALWARE_FILE_PATH})
DEFAULT_OUTPUT_FOLDER="/data/results/${MALWARE_FILE_NAME}/${CURRENT_TIME}"

OUTPUT_FOLDER=${OUTPUT_FOLDER:-${DEFAULT_OUTPUT_FOLDER}}

mkdir --parents ${OUTPUT_FOLDER}

exec 1> ${OUTPUT_FOLDER}/analysis-execution.log 2>&1

echo "*** Run Parameters ***"
echo "Params: $@"
echo "Dockerfile: $(dirname $(readlink -f "${MALWARE_FILE_PATH}"))/${DOCKERFILE_NAME}"

# 1. Create Malware Docker User
create_account USER_NAME

SYSFLOW_CONTAINER_OUTPUT_FILENAME=sysflow.log
SYSFLOW_CONTAINER_OUTPUT_PATH=/mnt/data
SYSFLOW_CONTAINER_NAME="sf-collector.${MALWARE_DOCKER_IMAGE_TAG//[:_\/]/-}"
SYSFLOW_OUTPUT_FOLDER="/home/${USER_NAME}/SysFlow_Analysis_Outputs"
SYSFLOW_OUTPUT_FILE=${SYSFLOW_OUTPUT_FOLDER}/${SYSFLOW_CONTAINER_OUTPUT_FILENAME}.json

# 2. Create Malware Docker Image
echo "*** Creating Docker Image ***"
if [[ ! -f "${DOCKER_CONTEXT}/${DOCKERFILE_NAME}" ]] || [[ "${OVERRIDE}" == true ]]; then
    sed -n "s/BASE_IMAGE/${BASE_IMAGE}/g;s/EXECUTABLE/${MALWARE_FILE_NAME}/g;w ${SCRIPT_FOLDER}/${DOCKERFILE_NAME}" ${SCRIPT_FOLDER}/Dockerfile.template
    mv --force ${SCRIPT_FOLDER}/${DOCKERFILE_NAME} "${DOCKER_CONTEXT}"
fi
docker build --tag "${MALWARE_DOCKER_IMAGE_TAG}" --file "${DOCKER_CONTEXT}/${DOCKERFILE_NAME}" "${DOCKER_CONTEXT}"

# 3. Start Sysflow Monitor
echo "*** Start Sysflow for Docker Image ***"
su - $USER_NAME -c "mkdir --parents ${SYSFLOW_OUTPUT_FOLDER}"
docker run \
	-t \
	-i \
	--detach \
	--privileged \
	--name "${SYSFLOW_CONTAINER_NAME}" \
	-v /var/run/docker.sock:/host/var/run/docker.sock \
	-v /dev:/host/dev \
	-v /proc:/host/proc:ro \
	-v /boot:/host/boot:ro \
	-v /lib/modules:/host/lib/modules:ro \
	-v /usr:/host/usr:ro \
	-v ${SYSFLOW_OUTPUT_FOLDER}:${SYSFLOW_CONTAINER_OUTPUT_PATH} \
	-e EXPORTER_ID=local \
	-e OUTPUT=${SYSFLOW_CONTAINER_OUTPUT_PATH}/${SYSFLOW_CONTAINER_OUTPUT_FILENAME} \
	-e FILTER="container.name!=${SYSFLOW_CONTAINER_NAME} and container.name=${MALWARE_CONTAINER_NAME}" \
	-e INTERVAL=${DURATION} \
	--rm \
	 sysflowtelemetry/sf-collector:edge

while IFS= read -r line
do
    ## take some action on $line
    echo ${line}
    SYSFLOW_CONTAINER_READY=$(grep "Enabled all file reads!" <<< ${line})
    if [ -n "${SYSFLOW_CONTAINER_READY}" ];
    then
        break
    fi
done < <(docker logs --follow ${SYSFLOW_CONTAINER_NAME})

# 4. Run Malware Docker Image
echo "*** starting docker container ***"
su - $USER_NAME -c "docker run --detach --name $MALWARE_CONTAINER_NAME $MALWARE_DOCKER_IMAGE_TAG"

# 5. Wait until Malware container stops:
echo "*** Waiting for Malware Docker container to stop ***"
(sleep $DURATION; stop_container $MALWARE_CONTAINER_NAME) &
docker wait $MALWARE_CONTAINER_NAME

# 6. Save Malware container Logs:
echo "*** Save Malware Docker logs ***"
su - $USER_NAME -c "mkdir -p ${SYSFLOW_OUTPUT_FOLDER}/Docker"
su - $USER_NAME -c "docker logs $MALWARE_CONTAINER_NAME > ${SYSFLOW_OUTPUT_FOLDER}/Docker/docker.log"
docker container rm $MALWARE_CONTAINER_NAME

# 7. Stop Sysflow Monitor
echo "*** Stop Sysflow Monitor ***"
docker container stop "${SYSFLOW_CONTAINER_NAME}"

# 8. Copy analysis results to output folder
cp -r ${SYSFLOW_OUTPUT_FOLDER}/. ${OUTPUT_FOLDER}

# 9. Create Pending Upload Folder symbolic link
if [ -n "${PU_SYM_LINK}" ];
then
    PU_SYM_LINK_PATH="$(dirname ${PU_SYM_LINK})"
    mkdir -p ${PU_SYM_LINK_PATH}
    OUTPUT_FOLDER_FULLPATH="$(dirname $(readlink -e ${OUTPUT_FOLDER}))/$(basename ${OUTPUT_FOLDER})"
    ln --symbolic ${OUTPUT_FOLDER_FULLPATH} ${PU_SYM_LINK}
fi

# 10. Delete user account
delete_account $USER_NAME

exit 0

# 8. Parse Sysflow Monitor Output
echo "*** Parse Sysflow Monitor Output ***"
su - $USER_NAME -c "docker run \
    --rm \
    -v ${SYSFLOW_OUTPUT_FOLDER}:${SYSFLOW_CONTAINER_OUTPUT_PATH} \
    sysflowtelemetry/sysprint -o json -w ${SYSFLOW_CONTAINER_OUTPUT_PATH}/${SYSFLOW_CONTAINER_OUTPUT_FILENAME} ${SYSFLOW_CONTAINER_OUTPUT_PATH}"

# 9. Parse Sysflow Monitor Output
echo "*** Pretifying output for human readability  ***"
su - $USER_NAME -c "jq . ${SYSFLOW_OUTPUT_FOLDER}/${SYSFLOW_CONTAINER_OUTPUT_FILENAME} > ${SYSFLOW_OUTPUT_FILE}"

# 10. Zip output file
echo "*** Creating payload for Virus Total ***"
su - $USER_NAME -c "zip -r ${SYSFLOW_OUTPUT_FOLDER}/payload.zip ${SYSFLOW_OUTPUT_FOLDER}/Docker/docker.log ${SYSFLOW_OUTPUT_FILE}"

# 11. Upload Syslow Monitor Ouput to Virus Total
echo "*** Upload Analysis output to Virus Total ***"
FULL_FILE_PATH=${SYSFLOW_OUTPUT_FOLDER}/payload.zip
source ${SCRIPT_FOLDER}/vt-api-key.env
VT_UPLOAD_RESPONSE=$(curl --request POST \
  --url https://www.virustotal.com/api/v3/files \
  --header "x-apikey: ${VT_API_KEY}" \
  --form file=@${FULL_FILE_PATH})
VT_HASH_ID=$(echo $VT_UPLOAD_RESPONSE | jq .data.id )

# 12. Push Virus Total Hash ID to Git
echo "*** Push Virus Total Hash ID to Git ***"
HASH_ID_FILE_NAME=${VT_HASH_ID//\"/''}
HASH_ID_FILE_PATH=${SCRIPT_FOLDER}/../results/${CURRENT_TIME}
mkdir --parents ${HASH_ID_FILE_PATH}
touch ${HASH_ID_FILE_PATH}/${HASH_ID_FILE_NAME}
cd ${SCRIPT_FOLDER}/../results
git add .
git commit -m "Add Hash ID for $(basename ${FULL_FILE_PATH})"
git push
cd -