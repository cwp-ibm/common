#!/bin/bash

function usage()
{
    echo -n "
    Perform full Sysflow Analyis on executable. 

    Usage:
      ./single-docker-malware-analysis.sh --executable <EXECUTABLE> [--max-duration <MAX-DURATION>] [--output <OUTPUT>]

    Options:
      --help                            Show this screen
      --executable <EXECUTABLE>         The full path of the executable to analyze
      --max-duration <MAX-DURATION>     [optional] The max duration in seconds to perform Sysflow Analysis
                                        If not defined defaults to 1 hour.
      --output <OUTPUT>                 [optional] The base folder to save analysis outputs
                                        If not defined defaults to the executable generated home folder.   
    "
    echo
}

function parse_args()
{
    if [[ "$#" -eq 0 ]]; then
        usage
        exit 1
    fi

    while (( "$#" )); do
        case "$1" in
            --executable)
            MALWARE_FILE_PATH="$2"
            shift 2
            ;;
			--output)
            OUTPUT_FOLDER="$2"
            shift 2
            ;;
            --max-duration)
            DURATION="$2"
            shift 2
            ;;
            --help)
            usage
            exit 0
            ;;
            --) # end argument parsing
            shift
            break
            ;;
            -*|--*) # unsupported flags
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
            *) # preserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
        esac
    done
}

function validate()
{
    if [[ -z ${MALWARE_FILE_PATH} ]]; 
    then
        usage
        exit 0
    fi
}

parse_args "$@"

validate

MALWARE_FILE_NAME="$(basename ${MALWARE_FILE_PATH})"
BASE_IMAGE=ubuntu:20.04
DURATION=${DURATION:-3600}
SCRIPT_FOLDER=$(dirname $(readlink -f "$0"))

# 1. Create Malware Docker User
USER_NAME="malware-${MALWARE_FILE_NAME//[._]/-}-docker"
USER_EXISTS=$(getent passwd ${USER_NAME})

# Create User if does not exists
if [[ -z ${USER_EXISTS} ]]; 
then
    ${SCRIPT_FOLDER}/create-malware-user.sh --docker-user ${MALWARE_FILE_NAME//[._]/-}
fi

USER_HOME_DIRECTORY=$(eval echo ~${USER_NAME})
OUTPUT_FOLDER=${OUTPUT_FOLDER:-${USER_HOME_DIRECTORY}}

# 2. Create Malware Docker Image
echo "*** Creating Docker Image ***"
CONTEXT=$(dirname ${MALWARE_FILE_PATH})
${SCRIPT_FOLDER}/create_docker_image.sh --context ${CONTEXT} --executable ${MALWARE_FILE_NAME}

# 3. Start Sysflow Monitor
echo "*** Start Sysflow for Docker Image ***"
DOCKER_IMAGE="$(basename ${MALWARE_FILE_NAME})":"${BASE_IMAGE/:/_}"
source ${SCRIPT_FOLDER}/start_sysflow_monitor.sh --docker-image ${DOCKER_IMAGE} --output-folder ${OUTPUT_FOLDER}

# 4. Run Malware Docker Image 
echo "*** starting docker container ***"
sleep 10
source ${SCRIPT_FOLDER}/run_docker_image_for_user.sh --user ${USER_NAME} --docker-image ${DOCKER_IMAGE} --duration ${DURATION}

# 5. Wait until Malware container stops:
echo "*** Waiting for Malware Docker container to stop ***"
docker wait $CONTAINER_NAME

# 6. Save Malware container Logs:
echo "*** Save Malware Docker logs ***"
mkdir -p ${SYSFLOW_OUTPUT_FOLDER}/Docker
docker logs $CONTAINER_NAME > ${SYSFLOW_OUTPUT_FOLDER}/Docker/docker.log
docker container rm $CONTAINER_NAME

# 7. Stop Sysflow Monitor
echo "*** Stop Sysflow Monitor ***"
${SCRIPT_FOLDER}/stop_sysflow_and_docker_container.sh --docker-image ${DOCKER_IMAGE}

# 8. Parse Sysflow Monitor Output
echo "*** Parse Sysflow Monitor Output ***"
${SCRIPT_FOLDER}/parse_sysflow_monitor_result.sh --sysflow-output-folder ${SYSFLOW_OUTPUT_FOLDER}

# 9. Upload Syslow Monitor Ouput to Virus Total
