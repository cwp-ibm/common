#!/bin/bash

function usage()
{
    echo -n "
    Perform full Sysflow Analyis on executable. 

    Usage:
      ./multiple-docker-malware-analysis.sh --malwares-folder <MALWARES-FOLDER> 
                                            [--max-duration <MAX-DURATION>] 
                                            [--output <OUTPUT>] 
                                            [--override-dockerfile] 
                                            [--max-parallel-analysis <MAX-PARALLEL-ANALYSIS>]

    Options:
      --help                                            Show this screen
      --malwares-folder <MALWARES-FOLDER>               The path of the executables to analyze
      --max-parallel-analysis <MAX-PARALLEL-ANALYSIS>   [optional] The number of malwares to analyze in parallel
                                                        Default: ${DEFAULT_MAX_RUNNING_JOBS}.
      --max-duration <MAX-DURATION>                     [optional] The max duration in seconds to perform Sysflow Analysis on each malware
                                                        Default: ${DEFAULT_MAX_MALWARE_DOCKER_RUN_DURATION} seconds.
      --output <OUTPUT>                                 [optional] The base folder to save analysis outputs
                                                        Default: ${DEFAULT_SYSFLOW_ANALYSIS_OUTPUT_FOLDER}.   
      --override-dockerfile                             [optional] Override the Dockerfile
      --pending-upload-folder <PENDING_UPLOAD_FOLDER>   [optional]
                                                        Default: ${DEFAULT_PENDING_UPLOAD_FOLDER}
    "
    echo
}

function parse_args()
{
    if [[ "$#" -eq 0 ]]; then
        usage
        exit 1
    fi

    while (( "$#" )); do
        case "$1" in
            --malwares-folder)
            MALWARES_FOLDER="$2"
            shift 2
            ;;
            --max-parallel-analysis)
            MAX_RUNNING_JOBS="$2"
            shift 2
            ;;
            --output)
            OUTPUT_FOLDER="$2"
            shift 2
            ;;
            --pending-upload-folder)
            PENDING_UPLOAD_FOLDER="$2"
            shift 2
            ;;
            --help)
            usage
            exit 0
            ;;
            *) # preserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
        esac
    done
}

function validate()
{
    if [[ -z ${MALWARES_FOLDER} ]]; 
    then
        usage
        exit 0
    fi
}

function running_jobs() {
    local __RESULTVAR=$1
    local __JOBS=`jobs -r -p`    
    local __JOBS_COUNTER=0
    for JOB in $__JOBS
    do
      ((__JOBS_COUNTER=__JOBS_COUNTER+1))
    done
    eval $__RESULTVAR="'$__JOBS_COUNTER'"
}

function main()
{
  SCRIPT_FOLDER=$(dirname $(readlink -f "$0"))
  source ${SCRIPT_FOLDER}/utils.sh
  
  parse_args "$@"
  validate

  PENDING_UPLOAD_FOLDER=${PENDING_UPLOAD_FOLDER:-$DEFAULT_PENDING_UPLOAD_FOLDER}
  MAX_RUNNING_JOBS=${MAX_RUNNING_JOBS:-$DEFAULT_MAX_RUNNING_JOBS}

  MALWARE_FILE_NAMES=(`find ${MALWARES_FOLDER} -type l -o -type f -a ! -name "*.Dockerfile"`)
  TOTAL_MALWARES_COUNTER=${#MALWARE_FILE_NAMES[@]}
  NEXT_MALWARE_INDEX=0
  CURRENT_TIME=$(date +%Y-%m-%dT%H-%M-%S)
  
  while [ $NEXT_MALWARE_INDEX -lt $TOTAL_MALWARES_COUNTER ]
  do
    running_jobs RUNNING_JOBS
    if [ $RUNNING_JOBS -lt $MAX_RUNNING_JOBS ]; 
    then
      NEXT_JOBS_COUNTER=$((MAX_RUNNING_JOBS - RUNNING_JOBS))
      LIMIT=$((NEXT_MALWARE_INDEX + NEXT_JOBS_COUNTER > TOTAL_MALWARES_COUNTER ? TOTAL_MALWARES_COUNTER : NEXT_JOBS_COUNTER + NEXT_MALWARE_INDEX))
      for INDEX in $( seq $NEXT_MALWARE_INDEX $((LIMIT - 1)));
      do
        MALWARE_FILE_NAME=${MALWARE_FILE_NAMES[INDEX]}
        EXECUTABLE_RELATIVE_PATH=$(dirname $(echo ${MALWARE_FILE_NAME} | sed "s|${MALWARES_FOLDER}/||"))
        EXECUTABLE=`readlink -f ${MALWARE_FILE_NAMES[INDEX]}`
        echo "Starting to analysis ${EXECUTABLE}"
        EXECUTABLE_OUTPUT_FOLDER=${OUTPUT_FOLDER:-${DEFAULT_SYSFLOW_ANALYSIS_OUTPUT_FOLDER}}
        ${SCRIPT_FOLDER}/single-docker-malware-analysis.sh --executable ${EXECUTABLE} \
                                                            --output ${EXECUTABLE_OUTPUT_FOLDER} \
                                                            --pending-upload-folder ${PENDING_UPLOAD_FOLDER} \
                                                            --output-relative-path ${EXECUTABLE_RELATIVE_PATH} \
                                                            --runtime ${CURRENT_TIME} $PARAMS &
        [ -L ${MALWARE_FILE_NAME} ] && unlink ${MALWARE_FILE_NAME}
        exit_on_error $?
        sleep 5
      done
      NEXT_MALWARE_INDEX=$LIMIT
    fi
    sleep 5
  done
}

main "$@"