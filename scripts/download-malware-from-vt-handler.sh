#!/bin/bash -i

# Input:
# 1. base folder containing files of Virus Total hashes to download [optional - defaults to /data/malwares/hash_lists]
# 2. base folder to save downloaded files [optional - defaults to /data/malwares]

function usage()
{
    echo -n "
    Download malwares from Virus Total defined in files 

    Usage:
      ./download-malware-from-vt-handler.sh [--download-output-folder <DOWNLOAD_OUTPUT_FOLDER>] [--max-duration <MAX-DURATION>]

    Options:
        --help                                              Show this screen
        --download-output-folder <DOWNLOAD_OUTPUT_FOLDER>   [optional] The base folder to save downloaded malwares.
                                                            Defaults to /data/malwares
        --malware-lists-folder <MALWARE_LISTS_FOLDER>       [optional] The base folder where files containing Virus Total hashes reside
        --pending-analysis-folder <PENDING_ANALYSIS_FOLDER> [optional] The folder to add symbolic link of malwares ready for analysis.
    "
    echo
}

function parse_args()
{
    while (( "$#" )); do
        case "$1" in
            --download-output-folder)
            BASE_DOWNLOAD_FOLDER="$2"
            shift 2
            ;;
			      --malware-lists-folder)
            BASE_MALWARES_HASH_LISTS_FOLDER="$2"
            shift 2
            ;;
            --help)
            usage
            exit 0
            ;;
            --) # end argument parsing
            shift
            break
            ;;
            *) # preserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
        esac
    done
}

parse_args "$@"
SCRIPT_FOLDER=$(dirname $(readlink -f "$0"))
source ${SCRIPT_FOLDER}/utils.sh
set -o histexpand -o history

DEFAULT_BASE_DOWNLOAD_FOLDER=/data/malwares

if [ ! -d ${DEFAULT_BASE_DOWNLOAD_FOLDER} ];
then
  mkdir --parent ${DEFAULT_BASE_DOWNLOAD_FOLDER}
  exit_on_error $? "mkdir --parent ${DEFAULT_BASE_DOWNLOAD_FOLDER}"
fi

DEFAULT_BASE_MALWARES_HASH_LISTS_FOLDER="/data/malwares/hash_lists"

if [ ! -d ${DEFAULT_BASE_MALWARES_HASH_LISTS_FOLDER} ];
then
  mkdir --parent ${DEFAULT_BASE_MALWARES_HASH_LISTS_FOLDER}
  exit_on_error $? "mkdir --parent ${DEFAULT_BASE_MALWARES_HASH_LISTS_FOLDER}"
fi

BASE_DOWNLOAD_FOLDER=${BASE_DOWNLOAD_FOLDER:-$DEFAULT_BASE_DOWNLOAD_FOLDER}
BASE_MALWARES_HASH_LISTS_FOLDER=${BASE_MALWARES_HASH_LISTS_FOLDER:-$DEFAULT_BASE_MALWARES_HASH_LISTS_FOLDER}

BASE_DOWNLOAD_FOLDER_FULL_PATH=$(readlink -f ${BASE_DOWNLOAD_FOLDER})
BASE_MALWARES_HASH_LISTS_FOLDER_FULL_PATH=$(readlink -f ${BASE_MALWARES_HASH_LISTS_FOLDER})

PENDING_MALWARE_LISTS=$(find ${BASE_MALWARES_HASH_LISTS_FOLDER_FULL_PATH} -type f ! -name '*.*' -exec bash -c 'FILE=$(dirname {})/download_status/$(basename {}).download.remain ; [[ -s $FILE || ! -f $FILE ]] && echo {}' \;)

PENDING_MALWARE_LISTS_ARRAY=($PENDING_MALWARE_LISTS)

(( ${#PENDING_MALWARE_LISTS_ARRAY[@]} == 0 )) && exit

SORTED_PENDING_MALWARE_LISTS=($(ls -rt ${PENDING_MALWARE_LISTS}))

for FILE in ${SORTED_PENDING_MALWARE_LISTS[@]}
do
  log ${FILE}
  FILE_RELATIVE_PATH=$(echo ${FILE} | sed "s|${BASE_MALWARES_HASH_LISTS_FOLDER_FULL_PATH}||")
  FILE_RELATIVE_PARENT_PATH=$(dirname $FILE_RELATIVE_PATH)
  FILE_NAME=$(basename $FILE)
  ${SCRIPT_FOLDER}/download-malware-from-vt.sh --malwares-hash-file ${FILE} --malware-download-relative-path ${FILE_RELATIVE_PARENT_PATH} --base-download-folder ${BASE_DOWNLOAD_FOLDER_FULL_PATH}
  ${SCRIPT_FOLDER}/create_pending_analysis.sh --malwares-containing-folder ${BASE_DOWNLOAD_FOLDER_FULL_PATH}/${FILE_RELATIVE_PARENT_PATH}/${FILE_NAME} $PARAMS
done

