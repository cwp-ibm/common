#!/bin/bash

SCRIPT_FOLDER=$(dirname $(readlink -f "$0"))
source ${SCRIPT_FOLDER}/utils.sh

function usage()
{
    echo -n "
    Download malwares from Virus Total defined in files 

    Usage:
      ./download-malware-from-vt-handler.sh [--download-output-folder <DOWNLOAD_OUTPUT_FOLDER>] 
                                            [--malware-lists-folder <MALWARE_LISTS_FOLDER>]
                                            [--pending-analysis-folder <BASE_PENDING_ANALYSIS_FOLDER>]
                                            [--download-budget <DOWNLOAD_BUDGET>]

    Options:
        --help                                                    Show this screen
        --download-output-folder <DOWNLOAD_OUTPUT_FOLDER>         [optional] The base folder to save downloaded malwares.
                                                                  Defaults to ${DEFAULT_BASE_DOWNLOAD_FOLDER}
        --malware-lists-folder <MALWARE_LISTS_FOLDER>             [optional] The base folder where files containing Virus Total hashes reside
                                                                  Defaults to ${DEFAULT_BASE_MALWARES_HASH_LISTS_FOLDER}
        --pending-analysis-folder <BASE_PENDING_ANALYSIS_FOLDER>  [optional] The folder to add symbolic link of malwares ready for analysis.
                                                                  Defaults to ${DEFAULT_BASE_PENDING_ANALYSIS_FOLDER}
        --download-budget <DOWNLOAD_BUDGET>                       [optional] The max allowed downloads
    "
    echo
}

function parse_args()
{
    while (( "$#" )); do
        case "$1" in
            --download-output-folder)
            BASE_DOWNLOAD_FOLDER="$2"
            shift 2
            ;;
			      --malware-lists-folder)
            BASE_MALWARES_HASH_LISTS_FOLDER="$2"
            shift 2
            ;;
            --download-budget)
            DOWNLOAD_BUDGET="$2"
            shift 2
            ;;
            # --pending-analysis-folder)
            # BASE_PENDING_ANALYSIS_FOLDER="$2"
            # shift 2
            # ;;            
            --dry-run)
            DRY_RUN=true
            shift 1
            ;;
            --help)
            usage
            exit 0
            ;;
            --) # end argument parsing
            shift
            break
            ;;
            *) # preserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
        esac
    done
}

function get_pending_malware_lists() 
{
  log "Generating list of pending malwares to download"
  [ "$#" -ne 2 ] && exit_on_error 1 "get_pending_malware_lists() called with invalid number of arguments"
  local __BASE_MALWARES_HASH_LISTS_FOLDER_FULL_PATH=$1
  if [ ! -d $__BASE_MALWARES_HASH_LISTS_FOLDER_FULL_PATH ];
  then
    exit_on_error 1 "${__BASE_MALWARES_HASH_LISTS_FOLDER_FULL_PATH} does not exist"
  fi
  local __PENDING_MALWARE_LISTS=$(find ${__BASE_MALWARES_HASH_LISTS_FOLDER_FULL_PATH} -type f ! -name '*.*' -exec bash -c 'FILE=$(dirname {})/download_status/$(basename {}).download.remain ; [[ -s $FILE || ! -f $FILE ]] && echo {}' \;)
  local __PENDING_MALWARE_LISTS_ARRAY=($__PENDING_MALWARE_LISTS)
  (( ${#__PENDING_MALWARE_LISTS_ARRAY[@]} == 0 )) && exit
  local __SORTED_PENDING_MALWARE_LISTS=($(ls -rt ${__PENDING_MALWARE_LISTS}))
  if [[ -n $2 ]];
  then
    local __RESULTVAR=$2
    eval $__RESULTVAR="'${__SORTED_PENDING_MALWARE_LISTS[@]}'"
  fi
}

function download_malwares_from_virus_total()
{
  local __FILE=$2
  local __FILE_RELATIVE_PARENT_PATH=$3
  local __BASE_DOWNLOAD_FOLDER_FULL_PATH=$4
  local __DOWNLOAD_BUDGET=$5
  log "Performing download for all malwares in ${__FILE}"
  if [ $DRY_RUN == false ];
  then
    __RESULT=$(${SCRIPT_FOLDER}/download-malware-from-vt.sh --malwares-hash-file ${__FILE} \
                                                  --malware-download-relative-path ${__FILE_RELATIVE_PARENT_PATH} \
                                                  --base-download-folder ${__BASE_DOWNLOAD_FOLDER_FULL_PATH} \
                                                  --download-budget ${__DOWNLOAD_BUDGET})
  fi
  if [[ -n $1 ]];
  then
    local __RESULTVAR=$1
    eval $__RESULTVAR="'${__RESULT}'"
  fi
}

function create_malwares_pending_analysis_symbolic_links()
{
  local __MALWARES_CONTAINING_FOLDER=$1
  local __FILE_RELATIVE_PARENT_PATH=$2
  local __PARAMS=${@:3}
  log "Generaing pending analysis symbolic links for downloaded malwares in folder ${__MALWARES_CONTAINING_FOLDER}"
  if [ $DRY_RUN == false ];
  then
    ${SCRIPT_FOLDER}/create_pending_analysis.sh --malwares-containing-folder ${__MALWARES_CONTAINING_FOLDER} \
                                                --pending-analysis-relative-path ${__FILE_RELATIVE_PARENT_PATH} \
                                                ${__PARAMS}
  fi
}

function validate() 
{
  [[ ${BASE_DOWNLOAD_FOLDER} == ${DEFAULT_BASE_DOWNLOAD_FOLDER} ]] && check_if_sudo;
  [[ ${BASE_MALWARES_HASH_LISTS_FOLDER} == ${DEFAULT_BASE_MALWARES_HASH_LISTS_FOLDER} ]] && check_if_sudo;
  # [[ ${BASE_PENDING_ANALYSIS_FOLDER} == ${DEFAULT_BASE_PENDING_ANALYSIS_FOLDER} ]] && check_if_sudo;
  # log "Creating folders: \"${BASE_DOWNLOAD_FOLDER}\", \"${BASE_MALWARES_HASH_LISTS_FOLDER}\" and \"${BASE_PENDING_ANALYSIS_FOLDER}\""
  log "Creating folders: \"${BASE_DOWNLOAD_FOLDER}\", \"${BASE_MALWARES_HASH_LISTS_FOLDER}\""
  create_directory ${BASE_DOWNLOAD_FOLDER} 
  create_directory ${BASE_MALWARES_HASH_LISTS_FOLDER}
  # create_directory ${BASE_PENDING_ANALYSIS_FOLDER}
}

function main() 
{
  parse_args $@

  set -o histexpand -o history -e

  DRY_RUN=${DRY_RUN:-false}

  BASE_DOWNLOAD_FOLDER=${BASE_DOWNLOAD_FOLDER:-$DEFAULT_BASE_DOWNLOAD_FOLDER}
  BASE_MALWARES_HASH_LISTS_FOLDER=${BASE_MALWARES_HASH_LISTS_FOLDER:-$DEFAULT_BASE_MALWARES_HASH_LISTS_FOLDER}
  # BASE_PENDING_ANALYSIS_FOLDER=${BASE_PENDING_ANALYSIS_FOLDER:-${DEFAULT_BASE_PENDING_ANALYSIS_FOLDER}}

  validate

  BASE_DOWNLOAD_FOLDER_FULL_PATH=$(readlink -f ${BASE_DOWNLOAD_FOLDER})
  BASE_MALWARES_HASH_LISTS_FOLDER_FULL_PATH=$(readlink -f ${BASE_MALWARES_HASH_LISTS_FOLDER})
  # BASE_PENDING_ANALYSIS_FOLDER_FULL_PATH=$(readlink -f ${BASE_PENDING_ANALYSIS_FOLDER})

  get_pending_malware_lists ${BASE_MALWARES_HASH_LISTS_FOLDER_FULL_PATH} PENDING_MALWARE_LISTS
  
  SUCCESSFUL_DOWNLOADS_COUNT=0
  for FILE in ${PENDING_MALWARE_LISTS[@]}
  do
    FILE_RELATIVE_PATH=$(echo ${FILE} | sed "s|${BASE_MALWARES_HASH_LISTS_FOLDER_FULL_PATH}/||")
    FILE_RELATIVE_PARENT_PATH=$(dirname $FILE_RELATIVE_PATH)
    FILE_NAME=$(basename $FILE)
    if [ -n $DOWNLOAD_BUDGET ]
    then
      NEXT_DOWNLOAD_BUDGET=$(( $DOWNLOAD_BUDGET - $SUCCESSFUL_DOWNLOADS_COUNT ))
    fi
    download_malwares_from_virus_total DOWNLOAD_RESULT ${FILE} ${FILE_RELATIVE_PARENT_PATH} ${BASE_DOWNLOAD_FOLDER_FULL_PATH} ${NEXT_DOWNLOAD_BUDGET}
    create_malwares_pending_analysis_symbolic_links ${BASE_DOWNLOAD_FOLDER_FULL_PATH}/${FILE_RELATIVE_PARENT_PATH}/${FILE_NAME} ${FILE_RELATIVE_PATH} $PARAMS
    if [ $DRY_RUN == false ]
    then
      SUCCESSFUL_DOWNLOADS=$( echo ${DOWNLOAD_RESULT} | jq '.successful_downloads' )
      REACHED_DAILY_QUOTA=$( echo ${DOWNLOAD_RESULT} | jq '.reached_daily_quota' )
      SUCCESSFUL_DOWNLOADS_COUNT=$(( $SUCCESSFUL_DOWNLOADS + $SUCCESSFUL_DOWNLOADS_COUNT ))
      if [[ ${REACHED_DAILY_QUOTA} == true || -n $DOWNLOAD_BUDGET && $SUCCESSFUL_DOWNLOADS_COUNT -eq $DOWNLOAD_BUDGET  ]]
      then
        break
      fi
    fi
  done
}

main "$@"
